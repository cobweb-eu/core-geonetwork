#Core security properties

logout.success.url=/home?node=@@nodeId@@
loginForm=/login.jsp?node=@@nodeId@@
loginErrorForm=/login.jsp?node=@@nodeId@@&failure=true
passwordSalt=secret-hash-salt=

# LDAP Connection Settings
ldap.base.provider.url=ldap://localhost:389
ldap.base.dn=dc=fao,dc=org
ldap.security.principal=cn=admin,dc=fao,dc=org
ldap.security.credentials=ldap

ldap.base.search.base=ou=users
ldap.base.dn.pattern=uid={0},${ldap.base.search.base}
#ldap.base.dn.pattern=mail={0},${ldap.base.search.base}


# Define if groups and profile information are imported from LDAP. If not, local database is used.
# When a new user connect first, the default profile is assigned. A user administrator can update
# privilege information.
ldap.privilege.import=true

# Define if LDAP groups should be create in catalog
# database if they do not exist.
ldap.privilege.create.nonexisting.groups=true

# Define if users should be saved in the LDAP
ldap.privilege.create.nonexisting.users=true



# Define the way to extract profiles and privileges from the LDAP
# 1. Define one attribute for the profile and one for groups in config-security-overrides.properties

# 2. Define one attribute for the privilege and define a custom pattern (use LDAPUserDetailsContextMapperWithPattern in config-security.xml).
ldap.privilege.pattern=(.*)_(.*)
#ldap.privilege.pattern=CAT_(.*)_(.*)
ldap.privilege.pattern.idx.group=1
ldap.privilege.pattern.idx.profil=2


# 3. Define custom location for extracting group and role (no support for group/role combination) (use LDAPUserDetailsContextMapperWithProfileSearch in config-security.xml).
ldap.privilege.search.group.attribute=cn
ldap.privilege.search.group.object=ou=groups,ou=dyfi-env1.cobwebproject.eu,ou=instances
ldap.privilege.search.group.query=memberuid={1}
ldap.privilege.search.group.queryprop=memberuid
ldap.privilege.search.group.pattern=(.*)
ldap.privilege.search.privilege.attribute=cn
ldap.privilege.search.privilege.object=ou=dyfi-env1.cobwebproject.eu,ou=instances
ldap.privilege.search.privilege.query=memberuid={0}
ldap.privilege.search.privilege.pattern=(.*)


# Run LDAP sync every day at 23:30
ldap.sync.cron=0 30 23 * * ?
#ldap.sync.cron=0 * * * * ?
#ldap.sync.cron=0 0/1 * 1/1 * ? *
ldap.sync.startDelay=60000
ldap.sync.user.search.base=${ldap.base.search.base}
ldap.sync.user.search.filter=(&(objectClass=*)(mail=*@*)(givenName=*))
ldap.sync.user.search.attribute=uid
ldap.sync.group.search.base=ou=cobweb.geocat.net,ou=instances
ldap.sync.group.search.filter=(&(objectClass=posixGroup)(cn=*))
ldap.sync.group.search.attribute=cn
ldap.sync.group.search.pattern=(.*)


# CAS properties
cas.baseURL=https://localhost:8443/cas
cas.ticket.validator.url=${cas.baseURL}
cas.login.url=${cas.baseURL}/login
cas.logout.url=${cas.baseURL}/logout?url=${geonetwork.https.url}/

# either the hardcoded url to the server
# or if has the form @blah@ it will be replaced with
# the server details from the server configuration
geonetwork.https.url=@to_be_replaced_at_runtime@

# The url to redirect to if a user logs in to one node then logs into another.
wrongNodeRedirectURL=/@@nodeId@@/@@lang@@/node-change-warning?oldUserName=@@oldUserName@@&redirectedFrom=@@redirectedFrom@@&oldNodeId=@@oldNodeId@@
